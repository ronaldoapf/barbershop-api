// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RECOVERY
}

enum BarberRole {
  BARBER
  MANAGER
  ADMIN
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

model User {
  id String @id @default(uuid())

  name     String
  email    String @unique
  password String

  isEmailVerified Boolean @default(false) @map("is_email_verified")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tokens       Token[]
  userLogins   UserLogin[]
  appointments Appointment[]

  @@map("users")
}

model Token {
  id               String    @id @default(uuid())
  token            String    @unique
  userId           String
  type             TokenType
  hasBeenValidated Boolean   @default(false) @map("has_been_validated")

  expiresAt DateTime @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId, token])
  @@map("tokens")
}

model UserLogin {
  id     String @id @default(uuid())
  code   String
  userId String

  expiresAt DateTime @map("expires_at")

  isValid Boolean @default(true) @map("is_valid")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId, code])
  @@map("userlogin")
}

model Barber {
  id String @id @default(uuid())

  name         String
  email        String     @unique
  password     String
  phoneNumber  String?    @map("phone_number")
  role         BarberRole @default(BARBER)
  isActive     Boolean    @default(true) @map("is_active")
  profilePhoto String?    @map("profile_photo")
  bio          String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  appointments Appointment[]
  services     BarberService[]
  availability BarberAvailability[]

  @@map("barbers")
}

model Service {
  id          String  @id @default(uuid())
  name        String
  description String?
  duration    Int // minutes
  price       Int // price in cents (e.g., 1999 = $19.99)
  isActive    Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  barbers      BarberService[]
  appointments Appointment[]

  @@map("services")
}

model BarberService {
  id          String @id @default(uuid())
  barberId    String @map("barber_id")
  serviceId   String @map("service_id")
  customPrice Int?   @map("custom_price") // price in cents

  barber  Barber  @relation(fields: [barberId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([barberId, serviceId])
  @@map("barber_services")
}

model Appointment {
  id          String            @id @default(uuid())
  userId      String            @map("user_id")
  barberId    String            @map("barber_id")
  serviceId   String            @map("service_id")
  scheduledAt DateTime          @map("scheduled_at")
  duration    Int // minutes
  status      AppointmentStatus @default(SCHEDULED)
  price       Int // price in cents (e.g., 1999 = $19.99)
  notes       String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id])
  barber  Barber  @relation(fields: [barberId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@index([barberId, scheduledAt])
  @@index([userId])
  @@map("appointments")
}

model BarberAvailability {
  id        String  @id @default(uuid())
  barberId  String  @map("barber_id")
  dayOfWeek Int // 0=Sunday, 1=Monday, ..., 6=Saturday
  startTime String  @map("start_time") // "09:00"
  endTime   String  @map("end_time") // "18:00"
  isActive  Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  barber Barber @relation(fields: [barberId], references: [id], onDelete: Cascade)

  @@unique([barberId, dayOfWeek])
  @@map("barber_availability")
}
